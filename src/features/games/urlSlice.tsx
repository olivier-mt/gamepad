import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";

export interface UrlInterface {
  url: string;
  page: number;
  search: string;
}

const initialState: UrlInterface = {
  page: 1,
  search: "",
  url: `https://api.rawg.io/api/games?key=01597bfbfa2f4a2b81104848a7098dfe`,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

/*
export const getGameListAsync = createAsyncThunk(
  "game/fetchGameList",
  async (url: string) => {
    const response = await axios.get(url);
    // The value we return becomes the `fulfilled` action payload
    console.log("url", url);

    return response;
  }
);
*/

export const urlSlice = createSlice({
  name: "url",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementPageNumber: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.page += 1;
    },
    decrementPageNumber: (state) => {
      state.page -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    sendNewUrl: (state, action: PayloadAction<string>) => {
      state.url = action.payload;
    },

    modifyPageNumByAmount: (state, action: PayloadAction<number>) => {
      state.page = action.payload;
    },
    modifySearch: (state, action: PayloadAction<string>) => {
      state.search = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  /*
  extraReducers: (builder) => {
    builder
      .addCase(getGameListAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getGameListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload.data;

        // console.log("state.value", state.value);
      })
      .addCase(getGameListAsync.rejected, (state) => {
        state.status = "failed";
      });
  },

  */
});

export const {
  incrementPageNumber,
  decrementPageNumber,
  sendNewUrl,
  modifyPageNumByAmount,
  modifySearch,
} = urlSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectUrl = (state: RootState) => state.url;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

/*export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };
*/

export default urlSlice.reducer;
